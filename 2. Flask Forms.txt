# FLASK FORMS
-------------

* Introduction
--------------
3 min
An important role of websites is gathering information from the user. Whether a user is signing into their Codecademy account, ordering clothes online or leaving feedback for a company, 
web forms have provided a simple way to enter and submit data over the internet.

The use of forms in a site can be an involved process. The designer must gather the right information, display the fields in a pleasing manner and ensure the data is collected correctly. 
Over the years this has become easier thanks to frameworks like Flask, which help streamline the process of displaying fields and gathering data.

This lesson assumes a foundational knowledge of web forms and the steps involved in sending the data to the web server. In the following exercises we are going to look at how Flask can 
help gather data from regular web forms as well as create forms in an entirely new way.

* Instructions
--------------
To help us learn about forms we will be using a cookbook app that lists recipes on a main page and links to individual recipe pages.

	. The main Flask app is contained in app.py and has three routes: index, recipe and about. The index route has method POST added to handle form submission.

	. The file helper.py contains the mock data for the app and has two functions, add_ingredients() and add_instructions() to help populate the data.

	. The main web page is rendered from the template index.html. There is a title, list of recipes and a new recipe form. The form has fields for the recipe name, description, 
	ingredients and instructions.

	. The other template is recipe.html which renders each individual recipe using the mock data.

Review the site structure and head to the next exercise when you’re ready.

index.html
----------
{% extends "base.html" %}
{% block content %}
  <h1>Cooking By Myself</h1>
  <p>Welcome to my cookbook. These are recipes I like.</p>
  {% for id, name in template_recipes.items() %}
    <p><a href="/recipe/{{ id }}">{{ name }}</a></p>
  {% endfor %}

  <form action="/" method="POST">
    <h3>Add Recipe</h3>
    <p>
      <label for="recipe">Name:</label>
      <input type="text" name="recipe"/>
    </p>
    <p>
      <label for="description">Description:</label>
      <textarea name="description"></textarea>
    </p>
    <p>
      <label for="ingredients">Ingredients:</label>
      <textarea name="ingredients"></textarea>
    </p>
    <p>
      <label for="instructions">Instructions:</label>
      <textarea name="instructions"></textarea>
    </p>
    <p><input type="submit" name="submit_recipe"/></p>
  </form>
{% endblock %}

app.py
------
from flask import Flask, render_template
from helper import recipes, descriptions, ingredients, instructions

app = Flask(__name__)

@app.route("/")
def index():
  return render_template("index.html", template_recipes=recipes)

@app.route("/recipe/<int:id>", methods=["GET", "POST"])
def recipe(id):
  return render_template("recipe.html", template_recipe=recipes[id], template_description=descriptions[id], template_ingredients=ingredients[id], template_instructions=instructions[id])

@app.route("/about")
def about():
  return render_template("about.html")

helper.py
---------
recipes = {1: "fried egg", 2: "buttered toast"}
types = {1: "Breakfast", 2: "Breakfast"}
descriptions = {1: "Egg fried in butter", 2: "Toasted bread spread with butter"}
ingredients = {1: ["1 pad of butter", "1 Egg", "A pinch of salt"], 2: ["1 pad of salted butter", "1 slice of bread"]}
instructions = {1: {"Step 2": "Crack the egg into the buttered pan", "Step 5": "Serve egg after about a minute and a half", "Step 1": "Melt butter in pan over medium-low heat", "Step 4": "Flip egg after about a minute and a half", "Step 3": "Sprinke the pinch of salt onto cooking egg",},
                2: {"Step 3": "Put the pad of butter on the toasted bread", "Step 4": "After a minute spread the melted butter onto the bread", "Step 1": "Put the bread in the toaster", "Step 2": "Take the toast out of the toaster"}}
comments = {1: ["Yummy!!", "Egg-cellent ;->"], 2: ["Toasty", "What a great recipe!"]}

def add_ingredients(recipe_id=None, text=None):
  if recipe_id and text:
    text_list = text.split("\n")
    ingredients[recipe_id] = text_list

def add_instructions(recipe_id=None, text=None):
  if recipe_id and text:
    text_list = text.split("\n")
    instructions_dict = {}
    for i, instruction in enumerate(text_list):
      instructions_dict["Step {}".format(i+1)] = instruction

    instructions[recipe_id] = instructions_dict

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Flask Request Object
----------------------
19 min
Every time a client communicates with a server it does so through a request. By default our Flask routes only support GET requests. These are requests for data such as what to display in 
a browser window. When submitting a form through a website, the form data is sent as a POST request. This type of request wants to add data to the app. Routes can handle POST requests if 
it is specified in the methods argument of the route() decorator.

@app.route("/", methods=["GET", "POST"])

The code above shows a route that now supports both GET and POST requests. By default methods is set to [“GET”]. When adding “POST” to a route’s methods, be sure to include “GET” if you 
plan for the route to handle those requests as well.

Flask provides access to the data in the request through the request object. Importing the request object allows us to access everything about the requests to our app including form data 
and the request method such as GET or POST.

from flask import request

When data is sent via a form submission it can be accessed using the form attribute of the request object. The form attribute is a dictionary with the form’s field names as the keys and 
the associated data as the values. For example, if a text input had the name "my_text", then the data access would look like this.

text_in_field = request.form["my_text"]

* Instructions
--------------
Checkpoint 1 Passed
1.
Before we begin with the form data, there are a few additions in the index() function to note regarding the gathering of form data:

	1. The variable new_id is assigned an integer that’s one more than the length of the recipes dictionary we imported form helper.py. This variable will be used as the key for the 
	new recipe data.

	2. The if len(request.form) > 0 statement makes sure there is data in the form object before trying to access them. Without this, a KeyError would be raised when the route is 
	accessed and the form is not submitted.

Review the changes and run the code when you are ready.

Checkpoint 2 Passed
2.
In app.py, note the request object has been added to the import section.

Working in the index route and using the request object, assign the contents of the form’s "recipe" text field to recipes[new_id].

After you run the code feel free to try out your work by refreshing the browser. Keep in mind that not all data is processed yet so clicking on the new recipe links will raise a KeyError.


Hint
Assign data in the field named "recipe" to recipes[new_id] using the following syntax.

some_var = request.form[field_name]

Checkpoint 3 Passed
3.
Repeat the same step for the description form data by assigning the description field data to descriptions[new_id].


Hint
Assign data in the field named "description" to descriptions[new_id] using the following syntax.

some_var = request.form[field_name]

Checkpoint 4 Passed
4.
The helper functions add_ingredients() and add_instructions() are set up to add the contents of the variables new_ingredients and new_instructions to the data. Currently both variables 
are set to None.

Put the form data named "ingredients" and "instructions" into the appropriate variables so the data is added to the app.


Hint
Assign data in the field named "ingredients" to new_ingredients and the data in the field named "instructions" to new_instructions using the following syntax.

some_var = request.form[field_name]

app.py
------
from flask import Flask, render_template, request
from helper import recipes, descriptions, ingredients, instructions, add_ingredients, add_instructions

app = Flask(__name__)

@app.route("/", methods=["GET", "POST"])
def index():
  new_id = len(recipes) + 1
  if len(request.form) > 0:
    #### Add the recipe name to recipes[new_id] 
    recipes[new_id] = request.form["recipe"]
    #### Add the recipe description to descriptions[new_id]
    descriptions[new_id] = request.form["description"]
    #### Add the values to new_ingredients and new_instructions
    new_ingredients = request.form["ingredients"]
    new_instructions = request.form["instructions"]
    add_ingredients(new_id, new_ingredients)
    add_instructions(new_id, new_instructions)
  return render_template("index.html", template_recipes=recipes)

@app.route("/recipe/<int:id>")
def recipe(id):
  return render_template("recipe.html", template_recipe=recipes[id], template_description=descriptions[id], template_ingredients=ingredients[id], template_instructions=instructions[id])

@app.route("/about")
def about():
  return render_template("about.html")

------------------------------------------------------------------------------------------------------------------------------------------------------------------










